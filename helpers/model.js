// Generated by CoffeeScript 1.6.3
(function() {
  var mongoose = require('mongoose');
  var autoIncrement = require('mongoose-auto-increment');

  _ = require('underscore');
  Async = require('async');

  config = require('../config');

  DB = config.getDB();

  Schema = mongoose.Schema;

  conn = mongoose.connect(DB);

  autoIncrement.initialize(conn);

  mongoose.connection.on("error", function(err) {
    console.error("MongoDB error: %s", err);
  });

  mongoose.set("debug", false);

  module.exports.conn = conn;

  module.exports.createSchemaModel = function(modelName, schemaJson, options) {
    schema = new Schema(schemaJson);
    if (options != null ? options.methods : void 0) {
      _(schema.methods).extend(options.methods);
    }
    if (modelName=='Patient')
      schema.plugin(autoIncrement.plugin, { model: modelName, field: 'patientId' });

    schema.set('autoIndex', false);
    return conn.model(modelName, schema);
  };

  module.exports.getAffectedRows = function(_id, oldObj, newObj, fieldArray, callback) {
    var rowsAffected = [], cDate = new Date();

    // Iterate thru each keys provided
    Async.eachSeries(fieldArray, function(v, cb) {
      // Verify property existence to each object
      if(v in oldObj && v in newObj) {

        // Sanitize object values
        oldObj[v] = (!Number.isNaN(oldObj[v]*1) && oldObj[v] !== "" ? oldObj[v]*1 : oldObj[v].trim());
        newObj[v] = (!Number.isNaN(newObj[v]*1) && newObj[v] !== "" ? newObj[v]*1 : newObj[v].trim());

        // Check field value difference
        if(oldObj[v] != newObj[v]) {

          // Populate affected fields
          rowsAffected.push({
            metaRef: mongoose.Types.ObjectId(_id), columnAffected: v, oldValue: oldObj[v], newValue: newObj[v], changeDate: cDate,
          });

        } setImmediate(cb);
      } else {
        setImmediate(cb);
      }
    }, function(err) {
      callback(rowsAffected);
    });
  };

}).call(this);
